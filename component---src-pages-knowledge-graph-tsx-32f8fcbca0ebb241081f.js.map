{"version":3,"file":"component---src-pages-knowledge-graph-tsx-32f8fcbca0ebb241081f.js","mappings":"gMA6BA,SAASA,EAAaC,GACpB,MAAO,IAAMA,EA2Ff,UA1EA,SAAwBC,GACtB,IAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cAmBtBC,EAAqB,GACrBC,EAAW,IAAIC,IACrBJ,EAAKK,OAAOC,MAAMC,SAAQ,SAACC,GACzB,IArCiBC,EAqCbC,EAAUb,EAAaW,EAAKV,MACjB,QAAXY,IAGJP,EAASQ,IAAID,EAxCR,CACLE,GAAIf,GAFaY,EAyCiBD,GAvCZV,MACtBe,MAAOJ,EAAKK,YAAYD,QAuCxBL,EAAKN,MAAMK,SAAQ,SAACQ,GAClB,IAAIC,EAAYnB,EAAakB,EAAUjB,MACnCmB,EArCV,SAA2BC,EAAcC,GAGvC,IAFA,IAAIC,EAAgB,EAChBC,EAAMC,KAAKC,IAAIL,EAAKM,OAAQL,EAAKK,QAC5BC,EAAI,EAAGA,EAAIJ,GAAOH,EAAKO,IAAMN,EAAKM,GAASL,IAALK,GAC/C,OAAOL,EAiCOM,CAAkBhB,EAASM,GACrCd,EAAMyB,KAAK,CACTC,OAAQlB,EACRmB,OAAQb,EACRQ,OAAQP,EAAM,EAAI,GAAK,IACvBa,mBAAoBb,EAAM,EAAI,IAAM,GACpCc,QAASd,EAAM,EAAI,EAAM,IACzBe,UAAWf,EAAM,EAAI,IAAM,YAIjC,IAAMX,GAAQ,OAAIH,EAAS8B,UAE3B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,wBAAMC,QAAQ,UACd,qDACA,wBAAMC,SAAS,WAAWC,QAAQ,yBAClC,wBAAMD,SAAS,UAAUC,QAAQ,YACjC,wBACED,SAAS,iBACTC,QAAQ,+DAIZ,uBACEC,MAAO,CACLC,SAAU,gCACVC,MAAO,gCACPC,OAAQ,SAGV,gBAAC,IAAD,CACElC,MAAOA,EACPJ,MAAOA,EACPuC,eAAgB,IAChBC,kBAAmB","sources":["webpack://elocater-s-notes/./src/pages/knowledge-graph.tsx"],"sourcesContent":["import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport {\n  GraphLink,\n  GraphNode,\n  NetworkGraph,\n} from '../components/network_graph';\nimport Layout from '../templates/layout';\n\nexport interface KnowledgeGraphProps {}\n\ninterface MdxGraphNode {\n  slug: string;\n  frontmatter: {\n    title: string;\n  };\n}\n\ninterface MdxRootNode extends MdxGraphNode {\n  links: MdxGraphNode[];\n}\n\ninterface FullNodeGraph {\n  allMdx: {\n    nodes: MdxRootNode[];\n  };\n}\n\nfunction slug_to_path(slug: string): string {\n  return '/' + slug;\n}\n\nfunction mdx_to_node(node: MdxGraphNode): GraphNode {\n  return {\n    id: slug_to_path(node.slug),\n    title: node.frontmatter.title,\n  };\n}\n\nfunction shared_prefix_len(id_a: string, id_b: string): number {\n  let shared_prefix = 0;\n  let max = Math.min(id_a.length, id_b.length);\n  for (let i = 0; i < max && id_a[i] == id_b[i]; i++, shared_prefix = i) {}\n  return shared_prefix;\n}\n\nfunction KnowledgeGraph(props: KnowledgeGraphProps): JSX.Element {\n  const data = useStaticQuery(graphql`\n    query FullNodeGraph {\n      allMdx {\n        nodes {\n          links {\n            ...MdxGraphNode\n          }\n          ...MdxGraphNode\n        }\n      }\n    }\n    fragment MdxGraphNode on Mdx {\n      slug\n      frontmatter {\n        title\n      }\n    }\n  `) as FullNodeGraph;\n\n  const links: GraphLink[] = [];\n  const node_map = new Map<string, GraphNode>();\n  data.allMdx.nodes.forEach((root: MdxRootNode) => {\n    let root_id = slug_to_path(root.slug);\n    if (root_id == '/404') {\n      return;\n    }\n    node_map.set(root_id, mdx_to_node(root));\n    root.links.forEach((link_node: MdxGraphNode) => {\n      let target_id = slug_to_path(link_node.slug);\n      let len = shared_prefix_len(root_id, target_id);\n      links.push({\n        source: root_id,\n        target: target_id,\n        length: len > 1 ? 50 : 100,\n        strengthMultiplier: len > 1 ? 1.5 : 0.1,\n        opacity: len > 1 ? 1.0 : 0.25,\n        lineWidth: len > 1 ? 1.1 : 0.9,\n      });\n    });\n  });\n  const nodes = [...node_map.values()];\n\n  return (\n    <Layout>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Full Knowledge Graph</title>\n        <meta property=\"og:title\" content=\"Full Knowledge Graph\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta\n          property=\"og:description\"\n          content=\"The complete knowledge graph for all of Elocater's Notes.\"\n        />\n      </Helmet>\n\n      <div\n        style={{\n          maxWidth: 'min(90vw, min(50rem, 1024px))',\n          width: 'min(90vw, min(50rem, 1024px))',\n          margin: 'auto',\n        }}\n      >\n        <NetworkGraph\n          nodes={nodes}\n          links={links}\n          forceStrength={-100}\n          collisionDistance={15}\n        ></NetworkGraph>\n      </div>\n    </Layout>\n  );\n}\n\nexport default KnowledgeGraph;\n"],"names":["slug_to_path","slug","props","data","useStaticQuery","links","node_map","Map","allMdx","nodes","forEach","root","node","root_id","set","id","title","frontmatter","link_node","target_id","len","id_a","id_b","shared_prefix","max","Math","min","length","i","shared_prefix_len","push","source","target","strengthMultiplier","opacity","lineWidth","values","charSet","property","content","style","maxWidth","width","margin","forceStrength","collisionDistance"],"sourceRoot":""}